lapply(iris$Sepal.Length, iris$Petal.Width, mean)
sapply(iris$Sepal.Length, iris$Petal.Width, mean)
library("swirl")
rm(list=ls())
swirl()
TRUE==TRUE
(FALSE == TRUE) == FALSE
6==7
6<7==TRUE
6<7
10<=10
5!=7
!5==7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5== 6, !FALSE)
ints <- sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
## Put comments here that give an overall description of what your
-## functions do
+## These two function create, store and recall a matrix and its inverse in/from cache
-## Write a short comment describing this function
-makeCacheMatrix <- function(x = matrix()) {
+## makeCacheMatrix creates custom matrix type capable of running four functions
+## set stores the matrix in cache, get recalls the matrix
+## setInverse and getInverse do the same but for the inverse of the original matrix
+makeCacheMatrix <- function(x = matrix()){
+  m <- NULL
+  set <- function(y){
+    x <<- y
+    m <<- NULL #store matrix in cache
+  }
+  get <- function() x #get matrix
+  setInverse <- function(solve) m<<- solve #set inverse matrix
+  getInverse <- function() m #get inverse matrix
+  list(set = set, get = get,
+       setInverse = setInverse,
+       getInverse = getInverse)  ## create list of functions
}
rm(list=ls())
clear()
}
makeCacheMatrix <- function(a = matrix()) {
m<-NULL
set<-function(b){
a<<-b
m<<-NULL
}
get<-function()a
setInv <- function(solve) m<<- solve
getInv <- function() m
list(set=set,get=get,setInv=setInv,getInv=getInv)
}
mkcmatrix <- function(a = matrix()) {
m<-NULL
set<-function(b){
a<<-b
m<<-NULL
}
get<-function()a
setinv <- function(solve) m<<- solve
getinv <- function() m
list(set=set,get=get,setinv=setinv,getinv=getinv)
}
csolve <- function(a, ...) {
m<-a$getinv()
if(!is.null(m))
message("work in progress")
return(m)
}
data<-a$get()
m<-solve(data,...)
a$setinv(m)
## Return a matrix that is the inverse of 'x'
}
csolve <- function(a, ...) {
m<-a$getinv()
if(!is.null(m)){
message("work in progress")
return(m)
}
data<-a$get()
m<-solve(data,...)
a$setinv(m)
## Return a matrix that is the inverse of 'x'
}
mkcmatrix <- function(a = matrix()) {
m<-NULL
set<-function(b){
a<<-b
m<<-NULL
}
get<-function()a
setinv <- function(solve) m<<- solve
getinv <- function() m
list(set=set,get=get,setinv=setinv,getinv=getinv)
}
## Write a short comment describing this function:using the matrix created with the previous function,
## calculates the inverse (checking before if the calculation has been made)
csolve <- function(a, ...) {
m<-a$getinv()
if(!is.null(m)){
message("work in progress")
return(m)
}
data<-a$get()
m<-solve(data,...)
a$setinv(m)
}
csolve
csolve(a)
csolve(3)
csolve(a)
mkcmatrix(4)
mkcmatrix()
?%in%
%in%
rm(list=ls())
ls()
list()
install (kernlab)
install.package (kernlab)
install.packages (kernlab)
install.packages ("kernlab")
library("kernlab", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
setwd("~/Documents/Work in progress/R Coding/Data Science/Exploratory Data Analysis/week1/Assignment")
setwd("~/Gitrs/ExData_Plotting1/data")
power.consumption<-read.table('data/power_consumption.txt',header=TRUE,sep='|')
power.consumption$DateTime<-as.POSIXlt(power.consumption$DateTime)
power.consumption<-read.table('data/household_power_consumption.txt',header=TRUE,sep='|')
power.consumption$DateTime<-as.POSIXlt(power.consumption$DateTime)
power.consumption<-read.table('data/household_power_consumption.txt',header=TRUE,sep='|')
setwd("~/Gitrs/ExData_Plotting1")
power.consumption<-read.table('data/household_power_consumption.txt',header=TRUE,sep='|')
power.consumption$DateTime<-as.POSIXlt(power.consumption$DateTime)
library("data.table", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("lubridate")
View(power.consumption)
library("lubridate", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
rm(list=ls())
if (!file.exists('source data/household_power_consumption.txt')) {
# download the zip file and unzip
file.url<-'https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip'
download.file(file.url,destfile='data/household_power_consumption.zip')
unzip('data/household_power_consumption.zip',exdir='data',overwrite=TRUE)
# read the raw table and limit to 2 days
variable.class<-c(rep('character',2),rep('numeric',7))
power.consumption<-read.table('source data/household_power_consumption.txt',header=TRUE,
sep=';',na.strings='?',colClasses=variable.class)
power.consumption<-power.consumption[power.consumption$Date=='1/2/2007' | power.consumption$Date=='2/2/2007',]
# clean up the variable names and convert date/time fields
cols<-c('Date','Time','GlobalActivePower','GlobalReactivePower','Voltage','GlobalIntensity',
'SubMetering1','SubMetering2','SubMetering3')
colnames(power.consumption)<-cols
power.consumption$DateTime<-dmy(power.consumption$Date)+hms(power.consumption$Time)
power.consumption<-power.consumption[,c(10,3:9)]
# write a clean data set to the directory
write.table(power.consumption,file='data/household_power_consumption.txt',sep='|',row.names=FALSE)
} else {
power.consumption<-read.table('data/household_power_consumption.txt',header=TRUE,sep='|')
power.consumption$DateTime<-as.POSIXlt(power.consumption$DateTime)
}
# remove the large raw data set
if (file.exists('data/household_power_consumption.txt')) {
x<-file.remove('data/household_power_consumption.txt')
}
download.file(file.url,destfile='data/household_power_consumption.zip')
# required packages
library(data.table)
library(lubridate)
# make sure the data folder exists
if (!file.exists('data')) {
dir.create('data')
}
# check to see if the existing tidy data set exists; if not, make it...
if (!file.exists('source data/household_power_consumption.txt')) {
# download the zip file and unzip
file.url<-'https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip'
download.file(file.url,destfile='data/household_power_consumption.zip')
unzip('data/household_power_consumption.zip',exdir='data',overwrite=TRUE)
# read the raw table and limit to 2 days
variable.class<-c(rep('character',2),rep('numeric',7))
power.consumption<-read.table('source data/household_power_consumption.txt',header=TRUE,
sep=';',na.strings='?',colClasses=variable.class)
power.consumption<-power.consumption[power.consumption$Date=='1/2/2007' | power.consumption$Date=='2/2/2007',]
# clean up the variable names and convert date/time fields
cols<-c('Date','Time','GlobalActivePower','GlobalReactivePower','Voltage','GlobalIntensity',
'SubMetering1','SubMetering2','SubMetering3')
colnames(power.consumption)<-cols
power.consumption$DateTime<-dmy(power.consumption$Date)+hms(power.consumption$Time)
power.consumption<-power.consumption[,c(10,3:9)]
# write a clean data set to the directory
write.table(power.consumption,file='data/household_power_consumption.txt',sep='|',row.names=FALSE)
} else {
power.consumption<-read.table('data/household_power_consumption.txt',header=TRUE,sep='|')
power.consumption$DateTime<-as.POSIXlt(power.consumption$DateTime)
}
# remove the large raw data set
if (file.exists('data/household_power_consumption.txt')) {
x<-file.remove('data/household_power_consumption.txt')
}
# required packages
library(data.table)
library(lubridate)
# make sure the data folder exists
if (!file.exists('data')) {
dir.create('data')
}
# check to see if the existing tidy data set exists; if not, make it...
if (!file.exists('source data/household_power_consumption.txt')) {
# download the zip file and unzip
download.file('https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip',destfile='/data/household_power_consumption.zip')
unzip('data/household_power_consumption.zip',exdir='data',overwrite=TRUE)
# read the raw table and limit to 2 days
variable.class<-c(rep('character',2),rep('numeric',7))
power.consumption<-read.table('source data/household_power_consumption.txt',header=TRUE,
sep=';',na.strings='?',colClasses=variable.class)
power.consumption<-power.consumption[power.consumption$Date=='1/2/2007' | power.consumption$Date=='2/2/2007',]
# clean up the variable names and convert date/time fields
cols<-c('Date','Time','GlobalActivePower','GlobalReactivePower','Voltage','GlobalIntensity',
'SubMetering1','SubMetering2','SubMetering3')
colnames(power.consumption)<-cols
power.consumption$DateTime<-dmy(power.consumption$Date)+hms(power.consumption$Time)
power.consumption<-power.consumption[,c(10,3:9)]
# write a clean data set to the directory
write.table(power.consumption,file='data/household_power_consumption.txt',sep='|',row.names=FALSE)
} else {
power.consumption<-read.table('data/household_power_consumption.txt',header=TRUE,sep='|')
power.consumption$DateTime<-as.POSIXlt(power.consumption$DateTime)
}
# remove the large raw data set
if (file.exists('data/household_power_consumption.txt')) {
x<-file.remove('data/household_power_consumption.txt')
}
# required packages
library(data.table)
library(lubridate)
# make sure the data folder exists
if (!file.exists('data')) {
dir.create('data')
}
# check to see if the existing tidy data set exists; if not, make it...
if (!file.exists('source data/household_power_consumption.txt')) {
# download the zip file and unzip
download.file('https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip',destfile='~/data/household_power_consumption.zip')
unzip('data/household_power_consumption.zip',exdir='data',overwrite=TRUE)
# read the raw table and limit to 2 days
variable.class<-c(rep('character',2),rep('numeric',7))
power.consumption<-read.table('source data/household_power_consumption.txt',header=TRUE,
sep=';',na.strings='?',colClasses=variable.class)
power.consumption<-power.consumption[power.consumption$Date=='1/2/2007' | power.consumption$Date=='2/2/2007',]
# clean up the variable names and convert date/time fields
cols<-c('Date','Time','GlobalActivePower','GlobalReactivePower','Voltage','GlobalIntensity',
'SubMetering1','SubMetering2','SubMetering3')
colnames(power.consumption)<-cols
power.consumption$DateTime<-dmy(power.consumption$Date)+hms(power.consumption$Time)
power.consumption<-power.consumption[,c(10,3:9)]
# write a clean data set to the directory
write.table(power.consumption,file='data/household_power_consumption.txt',sep='|',row.names=FALSE)
} else {
power.consumption<-read.table('data/household_power_consumption.txt',header=TRUE,sep='|')
power.consumption$DateTime<-as.POSIXlt(power.consumption$DateTime)
}
# remove the large raw data set
if (file.exists('data/household_power_consumption.txt')) {
x<-file.remove('data/household_power_consumption.txt')
}
# required packages
library(data.table)
library(lubridate)
# check to see if the existing tidy data set exists; if not, make it...
if (!file.exists('source data/household_power_consumption.txt')) {
# download the zip file and unzip
download.file('https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip')
unzip('data/household_power_consumption.zip',overwrite=TRUE)
# read the raw table and limit to 2 days
variable.class<-c(rep('character',2),rep('numeric',7))
power.consumption<-read.table('source data/household_power_consumption.txt',header=TRUE,
sep=';',na.strings='?',colClasses=variable.class)
power.consumption<-power.consumption[power.consumption$Date=='1/2/2007' | power.consumption$Date=='2/2/2007',]
# clean up the variable names and convert date/time fields
cols<-c('Date','Time','GlobalActivePower','GlobalReactivePower','Voltage','GlobalIntensity',
'SubMetering1','SubMetering2','SubMetering3')
colnames(power.consumption)<-cols
power.consumption$DateTime<-dmy(power.consumption$Date)+hms(power.consumption$Time)
power.consumption<-power.consumption[,c(10,3:9)]
# write a clean data set to the directory
write.table(power.consumption,file='data/household_power_consumption.txt',sep='|',row.names=FALSE)
} else {
power.consumption<-read.table('data/household_power_consumption.txt',header=TRUE,sep='|')
power.consumption$DateTime<-as.POSIXlt(power.consumption$DateTime)
}
# remove the large raw data set
if (file.exists('data/household_power_consumption.txt')) {
x<-file.remove('data/household_power_consumption.txt')
}
# set working directory (change this to fit your needs)
setwd('~/Gitrs/ExData_Plotting1/data')
# required packages
library(data.table)
library(lubridate)
# make sure the sources data folder exists
if (!file.exists('source data')) {
dir.create('source data')
}
# check to see if the existing tidy data set exists; if not, make it...
if (!file.exists('source data/power_consumption.txt')) {
# download the zip file and unzip
file.url<-'https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip'
download.file(file.url,destfile='source data/power_consumption.zip')
unzip('source data/power_consumption.zip',exdir='source data',overwrite=TRUE)
# read the raw table and limit to 2 days
variable.class<-c(rep('character',2),rep('numeric',7))
power.consumption<-read.table('source data/household_power_consumption.txt',header=TRUE,
sep=';',na.strings='?',colClasses=variable.class)
power.consumption<-power.consumption[power.consumption$Date=='1/2/2007' | power.consumption$Date=='2/2/2007',]
# clean up the variable names and convert date/time fields
cols<-c('Date','Time','GlobalActivePower','GlobalReactivePower','Voltage','GlobalIntensity',
'SubMetering1','SubMetering2','SubMetering3')
colnames(power.consumption)<-cols
power.consumption$DateTime<-dmy(power.consumption$Date)+hms(power.consumption$Time)
power.consumption<-power.consumption[,c(10,3:9)]
# write a clean data set to the directory
write.table(power.consumption,file='source data/power_consumption.txt',sep='|',row.names=FALSE)
} else {
power.consumption<-read.table('source data/power_consumption.txt',header=TRUE,sep='|')
power.consumption$DateTime<-as.POSIXlt(power.consumption$DateTime)
}
# remove the large raw data set
if (file.exists('source data/household_power_consumption.txt')) {
x<-file.remove('source data/household_power_consumption.txt')
}
# set working directory (change this to fit your needs)
setwd('~/Gitrs/ExData_Plotting1/data')
# required packages
library(data.table)
library(lubridate)
# check to see if the existing tidy data set exists; if not, make it...
if (!file.exists('household_power_consumption.txt')) {
# download the zip file and unzip
file.url<-'https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip'
download.file(file.url,destfile='power_consumption.zip')
unzip('power_consumption.zip',exdir='source data',overwrite=TRUE)
# read the raw table and limit to 2 days
variable.class<-c(rep('character',2),rep('numeric',7))
power.consumption<-read.table('source data/household_power_consumption.txt',header=TRUE,
sep=';',na.strings='?',colClasses=variable.class)
power.consumption<-power.consumption[power.consumption$Date=='1/2/2007' | power.consumption$Date=='2/2/2007',]
# clean up the variable names and convert date/time fields
cols<-c('Date','Time','GlobalActivePower','GlobalReactivePower','Voltage','GlobalIntensity',
'SubMetering1','SubMetering2','SubMetering3')
colnames(power.consumption)<-cols
power.consumption$DateTime<-dmy(power.consumption$Date)+hms(power.consumption$Time)
power.consumption<-power.consumption[,c(10,3:9)]
# write a clean data set to the directory
write.table(power.consumption,file='source data/power_consumption.txt',sep='|',row.names=FALSE)
} else {
power.consumption<-read.table('source data/power_consumption.txt',header=TRUE,sep='|')
power.consumption$DateTime<-as.POSIXlt(power.consumption$DateTime)
}
# remove the large raw data set
if (file.exists('source data/household_power_consumption.txt')) {
x<-file.remove('source data/household_power_consumption.txt')
}
# set working directory (change this to fit your needs)
setwd('~/Gitrs/ExData_Plotting1/data')
# required packages
library(data.table)
library(lubridate)
# check to see if the existing tidy data set exists; if not, make it...
if (!file.exists('household_power_consumption.txt')) {
# download the zip file and unzip
file.url<-'https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip'
download.file(file.url,destfile='power_consumption.zip', method="curl")
unzip('power_consumption.zip',exdir='./ExData_Plotting1',overwrite=TRUE)
# read the raw table and limit to 2 days
variable.class<-c(rep('character',2),rep('numeric',7))
power.consumption<-read.table('household_power_consumption.txt',header=TRUE,
sep=';',na.strings='?',colClasses=variable.class)
power.consumption<-power.consumption[power.consumption$Date=='1/2/2007' | power.consumption$Date=='2/2/2007',]
# clean up the variable names and convert date/time fields
cols<-c('Date','Time','GlobalActivePower','GlobalReactivePower','Voltage','GlobalIntensity',
'SubMetering1','SubMetering2','SubMetering3')
colnames(power.consumption)<-cols
power.consumption$DateTime<-dmy(power.consumption$Date)+hms(power.consumption$Time)
power.consumption<-power.consumption[,c(10,3:9)]
# write a clean data set to the directory
write.table(power.consumption,file='household_power_consumption.txt',sep='|',row.names=FALSE)
} else {
power.consumption<-read.table('household_power_consumption.txt',header=TRUE,sep='|')
power.consumption$DateTime<-as.POSIXlt(power.consumption$DateTime)
}
# remove the large raw data set
if (file.exists('household_power_consumption.txt')) {
x<-file.remove('household_power_consumption.txt')
}
# set working directory (change this to fit your needs)
setwd('~/Gitrs/ExData_Plotting1')
# required packages
library(data.table)
library(lubridate)
# check to see if the existing tidy data set exists; if not, make it...
if (!file.exists('household_power_consumption.txt')) {
# download the zip file and unzip
file.url<-'https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip'
download.file(file.url,destfile='power_consumption.zip', method="curl")
unzip('power_consumption.zip',exdir='./',overwrite=F)
# read the raw table and limit to 2 days
variable.class<-c(rep('character',2),rep('numeric',7))
power.consumption<-read.table('household_power_consumption.txt',header=TRUE,
sep=';',na.strings='?',colClasses=variable.class)
power.consumption<-power.consumption[power.consumption$Date=='1/2/2007' | power.consumption$Date=='2/2/2007',]
# clean up the variable names and convert date/time fields
cols<-c('Date','Time','GlobalActivePower','GlobalReactivePower','Voltage','GlobalIntensity',
'SubMetering1','SubMetering2','SubMetering3')
colnames(power.consumption)<-cols
power.consumption$DateTime<-dmy(power.consumption$Date)+hms(power.consumption$Time)
power.consumption<-power.consumption[,c(10,3:9)]
# write a clean data set to the directory
write.table(power.consumption,file='household_power_consumption.txt',sep='|',row.names=FALSE)
} else {
power.consumption<-read.table('household_power_consumption.txt',header=TRUE,sep='|')
power.consumption$DateTime<-as.POSIXlt(power.consumption$DateTime)
}
# remove the large raw data set
if (file.exists('household_power_consumption.txt')) {
x<-file.remove('household_power_consumption.txt')
}
# set working directory (change this to fit your needs)
setwd('~/Gitrs/ExData_Plotting1')
# make sure the plots folder exists
if (!file.exists('plots')) {
dir.create('plots')
}
# load data
source('cleandata.R')
# open device
png(filename='plots/plot1.png',width=480,height=480,units='px')
# plot data
hist(power.consumption$GlobalActivePower,main='Global Active Power',xlab='Global Active Power (kilowatts)',col='red')
# Turn off device
x<-dev.off()
# set working directory (change this to fit your needs)
setwd('~/Gitrs/ExData_Plotting1')
# make sure the plots folder exists
if (!file.exists('plots')) {
dir.create('plots')
}
# load data
source('cleandata.R')
# open device
png(filename='plots/plot2.png',width=480,height=480,units='px')
# plot data
plot(power.consumption$DateTime,power.consumption$GlobalActivePower,ylab='Global Active Power (kilowatts)', xlab='', type='l')
# close device
x<-dev.off()
# set working directory (change this to fit your needs)
setwd('~/Gitrs/ExData_Plotting1')
# make sure the plots folder exists
if (!file.exists('plots')) {
dir.create('plots')
}
# load data
source('cleandata.R')
# open device
png(filename='plots/plot3.png',width=480,height=480,units='px')
# plot data
lncol<-c('black','red','blue')
lbls<-c('Sub_metering_1','Sub_metering_2','Sub_metering_3')
plot(power.consumption$DateTime,power.consumption$SubMetering1,type='l',col=lncol[1],xlab='',ylab='Energy sub metering')
lines(power.consumption$DateTime,power.consumption$SubMetering2,col=lncol[2])
lines(power.consumption$DateTime,power.consumption$SubMetering3,col=lncol[3])
# add legend
legend('topright',legend=lbls,col=lncol,lty='solid')
# close device
x<-dev.off()
# set working directory (change this to fit your needs)
setwd('~/Gitrs/ExData_Plotting1')
# make sure the plots folder exists
if (!file.exists('plots')) {
dir.create('plots')
}
# load data
source('cleandata.R')
# open device
png(filename='plots/plot4.png',width=480,height=480,units='px')
# make 4 plots
par(mfrow=c(2,2))
# plot data on top left (1,1)
plot(power.consumption$DateTime,power.consumption$GlobalActivePower,ylab='Global Active Power',xlab='',type='l')
# plot data on top right (1,2)
plot(power.consumption$DateTime,power.consumption$Voltage,xlab='datetime',ylab='Voltage',type='l')
# plot data on bottom left (2,1)
lncol<-c('black','red','blue')
lbls<-c('Sub_metering_1','Sub_metering_2','Sub_metering_3')
plot(power.consumption$DateTime,power.consumption$SubMetering1,type='l',col=lncol[1],xlab='',ylab='Energy sub metering')
lines(power.consumption$DateTime,power.consumption$SubMetering2,col=lncol[2])
lines(power.consumption$DateTime,power.consumption$SubMetering3,col=lncol[3])
# plot data on bottom right (2,2)
plot(power.consumption$DateTime,power.consumption$GlobalReactivePower,xlab='datetime',ylab='Global_reactive_power',type='l')
# close device
x<-dev.off()
